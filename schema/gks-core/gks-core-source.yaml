$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://w3id.org/ga4gh/schema/gks-core/1.0.0-snapshot.2024-11.1/gks-core-source.yaml"
title: GKS Core Class Definitions
strict: true

$defs:
  # abstract core classes section -- Entity, Element
  Entity:
    maturity: trial use
    description: Anything that exists, has existed, or will exist.
    $comment: >-
      Entity is the root class of the 'gks-core' information model. All core classes that
      have ids and other general metadata like label, description, type, or extensions descend from
      this class and inherit its attributes.
    heritableProperties:
      id:
        type: string
        description: >-
          The 'logical' identifier of the Entity in the system of record, e.g. a UUID.  This 'id' is
          unique within a given system, but may or may not be globally unique outside the system. It
          is used within a system to reference an object from another.
        $comment: >-
          Note that it is common for implementers to create their own internal logical ids -
          typically a serially or randomly generated value like a UUID that is assigned to the
          data object as it is created in a system. But an implementer may choose to re-use an
          existing, globally unique id from an external system or authority for this purpose
          (e.g. an HGNC id for a Gene object) - as long as it is unique within the implementing
          system, and can be used to reference the identified object in this context.
      type:
        type: string
        description: >-
          The name of the class that is instantiated by a data object representing the Entity.
        $comment: MUST be the label of a concrete class from the data model.
      label:
        type: string
        description: A primary name for the entity.
      description:
        type: string
        description: A free-text description of the Entity.
      alternativeLabels:
        type: array
        ordered: false
        items:
          type: string
        description: Alternative name(s) for the Entity.
      extensions:
        type: array
        ordered: false
        items:
          $ref: "#/$defs/Extension"
        description: >-
          A list of extensions to the Entity, that allow for capture of information not directly
          supported by elements defined in the model.
        $comment: >-
          Extension objects have a key-value data structure that allows definition of custom
          fields in the data itself. Extensions are not expected to be natively understood,
          but may be used for pre-negotiated exchange of message attributes between systems.
    heritableRequired:
      - type

  Element:
    maturity: trial use
    description: >-
      The base definition for all identifiable data objects.
    heritableProperties:
      id:
        type: string
        description: >-
          The 'logical' identifier of the data element in the system of record, e.g. a UUID.  This 'id' is
          unique within a given system, but may or may not be globally unique outside the system. It
          is used within a system to reference an object from another.
      extensions:
        type: array
        ordered: false
        items:
          $ref: "#/$defs/Extension"
        description: >-
          A list of extensions to the Entity, that allow for capture of information not directly
          supported by elements defined in the model.
        $comment: >-
          Extension objects have a key-value data structure that allows definition of custom
          fields in the data itself. Extensions are not expected to be natively understood,
          but may be used for pre-negotiated exchange of message attributes between systems.

  # general-purpose data classes section -- Extension, MappableConcept, ConceptMapping, Coding
  Extension:
    inherits: Element
    type: object
    maturity: trial use
    description: >-
      The Extension class provides entities with a means to include
      additional attributes that are outside of the specified standard
      but needed by a given content provider or system implementer.
      These extensions are not expected to be natively understood, but
      may be used for pre-negotiated exchange of message attributes
      between systems.
    properties:
      name:
        type: string
        description: >-
          A name for the Extension. Should be indicative of its meaning and/or the type of
          information it value represents.
      value:
        type: [ "number", "string", "boolean", "object", "array", "null" ]
        description: The value of the Extension - can be any primitive or structured object
        additionalProperties: true
      description:
        type: string
        description: >-
          A description of the meaning or utility of the Extension, to explain
          the type of information it is meant to hold.
    required:
      - name
      - value

  MappableConcept:
    inherits: Element
    type: object
    maturity: trial use
    description: >-
      A concept label that may be mapped to one or more :ref:`Codings <Coding>`.
    properties:
      conceptType:
        type: string
        description: >-
          A term indicating the type of concept being represented by the MappableConcept.
        $comment: >-
          This attribute can be used to indicate the type of concept being represented by the MappableConcept.
          For example, in a variant pathogenicity assessment, the conceptType could be 'Pathogenicity Strength',
          'Disease', 'Phenotype', 'Drug', 'Tumor Type', 'Evidence Direction', 'Evidence Strength', etc.
      label:
        type: string
        description: A primary name for the concept.
      primaryCode:
        $ref: "#/$defs/code"
        description: >-
          A primary code for the concept that is used to identify the concept in a terminology or code system.
          If there is a public code system for the primaryCode then it should also be specified in the mappings
          array with a relation of 'exactMatch'. This attribute is provided to both allow a more technical code
          to be used when a public Coding with a system is not available as well as when it is available but
          should be identified as the primary code.
      mappings:
        type: array
        ordered: false
        items:
          $ref: "#/$defs/ConceptMapping"
        description: >-
          A list of mappings to concepts in terminologies or code systems. Each mapping should
          include a coding and a relation.
    anyOf:
      - required:
          - label
      - required:
          - primaryCode

  ConceptMapping:
    type: object
    inherits: Element
    maturity: trial use
    description: >-
      A mapping to a concept in a terminology or code system.
    properties:
      coding:
        $ref: '#/$defs/Coding'
        description: >-
          A structured representation of a code for a defined concept in a terminology or code system.
      relation:
        description: >-
          A mapping relation between concepts as defined by the Simple Knowledge Organization System (SKOS).
        type: string
        enum:
          - closeMatch
          - exactMatch
          - broadMatch
          - narrowMatch
          - relatedMatch
    required:
      - relation
      - coding

  Coding:
    inherits: Element
    type: object
    maturity: trial use
    description: >-
      A structured representation of a code for a defined concept in a terminology or code system.
    properties:
      label:
        type: string
        description: The human-readable name for the coded concept, as defined by the code system.
      system:
        type: string
        description: >-
          The terminology/code system that defined the code. May be reported as a free-text name
          (e.g. 'Sequence Ontology'), but it is preferable to provide a uri/url for the system.
          When the 'code' is reported as a CURIE, the 'system' should be reported as the uri that
          the CURIE's prefix expands to (e.g. 'http://purl.obofoundry.org/so.owl/' for the
          Sequence Ontology).
      systemVersion:
        type: string
        description: Version of the terminology or code system that provided the code.
      code:
        $ref: '#/$defs/code'
        description: >-
          A symbol uniquely identifying the concept, as in a syntax defined by the code system.
          CURIE format is preferred where possible (e.g. 'SO:0000704' is the CURIE form of the
          Sequence Ontology code for 'gene').
    required:
      - system
      - code

  # primitive data types section for convenience and consistency -- code, iriReference, date, datetime
  code:    
    type: string
    maturity: draft
    description: >-
      Indicates that the value is taken from a set of controlled strings defined elsewhere.
      Technically, a code is restricted to a string which has at least one character and no leading or
      trailing whitespace, and where there is no whitespace other than single spaces in the contents.
    pattern: '\S+( \S+)*'
    example: ENSG00000139618

  iriReference:
    type: string
    maturity: trial use
    description: >-
      An IRI Reference (either an IRI or a relative-reference), according to `RFC3986 section 4.1
      <https://datatracker.ietf.org/doc/html/rfc3986#section-4.1>`_ and `RFC3987 section 2.1
      <https://datatracker.ietf.org/doc/html/rfc3987#section-2.1>`_. MAY be a JSON Pointer as an IRI fragment, as
      described by `RFC6901 section 6 <https://datatracker.ietf.org/doc/html/rfc6901#section-6>`_.
    format: iri-reference

  date:
    type: string
    maturity: draft
    description: >-
      A string is valid against this format if it represents a date in the following format: YYYY-MM-DD.
    format: date

  datetime:
    type: string
    maturity: draft
    description: >-
      A string is valid against this format if it represents a date-time in the following format:
      YYYY:MM::DDThh:mm:ss.sTZD.
    format: date-time